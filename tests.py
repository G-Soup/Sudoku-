import unittest
from Solution import *
from main import *
from CreateSudoku import *

class MainTestCase(unittest.TestCase):

    def setUp(self):
        pass

    def tearDown(self):
        pass
    
    
    def test1(self):
        board =[['5','3','.','.','7','.','.','.','.'], \
            ['6','.','.','1','9','5','.','.','.'], \
            ['.','9','8','.','.','.','.','6','.'], \
            ['8','.','.','.','6','.','.','.','.'], \
            ['4','.','.','8','.','3','.','.','1'], \
            ['7','.','.','.','2','.','.','.','6'], \
            ['.','6','.','.','.','.','2','8','.'], \
            ['.','.','.','4','1','9','.','.','5'], \
            ['.','.','.','.','8','.','.','7','9']]
        
        assert main(board) == [['5', '3', '4', '6', '7', '8', '9', '1', '2'], ['6', '7', '2', '1', '9', '5', '3', '4', '8'], ['1', '9', '8', '3', '4', '2', '5', '6', '7'], \
                             ['8', '5', '9', '7', '6', '1', '4', '2', '3'], ['4', '2', '6', '8', '5', '3', '7', '9', '1'], ['7', '1', '3', '9', '2', '4', '8', '5', '6'], \
                             ['9', '6', '1', '5', '3', '7', '2', '8', '4'], ['2', '8', '7', '4', '1', '9', '6', '3', '5'], ['3', '4', '5', '2', '8', '6', '1', '7', '9']], "Failed Test ONE"
    
    """
    def test2(self):
        board2 =   [[".",".","9","7","4","8",".",".","."],\
                    ["7",".",".",".",".",".",".",".","."],\
                    [".","2",".","1",".","9",".",".","."],\
                    [".",".","7",".",".",".","2","4","."],\
                    [".","6","4",".","1",".","5","9","."],\
                    [".","9","8",".",".",".","3",".","."],\
                    [".",".",".","8",".","3",".","2","."],\
                    [".",".",".",".",".",".",".",".","6"],\
                    [".",".",".","2","7","5","9",".","."]]
        
        assert main(board2) == [["5","1","9","7","4","8","6","3","2"],["7","8","3","6","5","2","4","1","9"],["4","2","6","1","3","9","8","7","5"],["3","5","7","9","8","6","2","4","1"],["2","6","4","3","1","7","5","9","8"],["1","9","8","5","2","4","3","6","7"],["9","7","5","8","6","3","1","2","4"],["8","3","2","4","9","1","7","5","6"],["6","4","1","2","7","5","9","8","3"]], "Failed Testcase TWO"
    """
class SolutionTestCase(unittest.TestCase):
    def setUp(self):
        pass

    def tearDown(self):
        pass

    def test_check_if_only_peer(self):
        possible_values = [[['1', '3', '5', '6'], [ '3', '5'], '.', '.', '.', '.', [ '6'], [ '3', '5', '6'], [ '2', '3', '5']], ['.', [ '3', '4', '5', '8'], [ '3', '5', '6'], ['3', '5', '6'], ['2', '3', '5', '6'], ['2', '6'], [ '4', '6', '8'], [ '3', '5', '6', '8'], [ '2', '3', '4', '5', '8', '9']], [['3', '4', '5', '6', '8'], '.', ['3', '5', '6'], '.', ['3', '5', '6'], '.', ['4', '6', '7', '8'], ['3', '5', '6', '7', '8'], ['3', '4', '5', '7', '8']], [[ '3', '5'], [ '3', '5'], '.', ['3', '5', '6', '9'], ['3', '5', '6', '8', '9'], ['6'], '.', '.', [ '8']], [['2', '3'], '.', '.', ['3'], '.', ['2', '7'], '.', '.', ['7', '8']], [[ '2', '5'], '.', '.', ['4', '5', '6'], ['2', '5', '6'], ['2', '4', '6', '7'], '.', [ '6', '7'], [ '7']], [[ '4', '5', '6', '9'], [ '4', '5', '7'], [ '5', '6'], '.', ['6', '9'], '.', [ '4', '7'], '.', [ '4', '5', '7']], [['2', '3', '4', '5', '8', '9'], [ '3', '4', '5', '7', '8'], ['2', '3', '5'], ['4', '9'], ['9'], ['4'], ['4', '7', '8'], ['3', '5', '7', '8'], '.'], [['3', '4', '6', '8'], ['3', '4', '8'], ['3', '6'], '.', '.', '.', '.', ['3', '8'], ['3', '4', '8']]]
        assert int(check_if_only_peer(possible_values, 0,0)) > 0, "IDK what is going on with this"


class BackTrackTestCases(unittest.TestCase):
    def setUp(self):
        pass
    

    #These tests are for the overall function
    def testBackTrack1(self):
        board =[['5','3','.','.','7','.','.','.','.'], \
            ['6','.','.','1','9','5','.','.','.'], \
            ['.','9','8','.','.','.','.','6','.'], \
            ['8','.','.','.','6','.','.','.','.'], \
            ['4','.','.','8','.','3','.','.','1'], \
            ['7','.','.','.','2','.','.','.','6'], \
            ['.','6','.','.','.','.','2','8','.'], \
            ['.','.','.','4','1','9','.','.','5'], \
            ['.','.','.','.','8','.','.','7','9']]
        guess_solve(board)
        assert(board) == [['5', '3', '4', '6', '7', '8', '9', '1', '2'], ['6', '7', '2', '1', '9', '5', '3', '4', '8'], ['1', '9', '8', '3', '4', '2', '5', '6', '7'], \
                             ['8', '5', '9', '7', '6', '1', '4', '2', '3'], ['4', '2', '6', '8', '5', '3', '7', '9', '1'], ['7', '1', '3', '9', '2', '4', '8', '5', '6'], \
                             ['9', '6', '1', '5', '3', '7', '2', '8', '4'], ['2', '8', '7', '4', '1', '9', '6', '3', '5'], ['3', '4', '5', '2', '8', '6', '1', '7', '9']], "Failed Test ONE"
    
    def testBackTrack2(self):
        board2 =   [[".",".","9","7","4","8",".",".","."],\
                    ["7",".",".",".",".",".",".",".","."],\
                    [".","2",".","1",".","9",".",".","."],\
                    [".",".","7",".",".",".","2","4","."],\
                    [".","6","4",".","1",".","5","9","."],\
                    [".","9","8",".",".",".","3",".","."],\
                    [".",".",".","8",".","3",".","2","."],\
                    [".",".",".",".",".",".",".",".","6"],\
                    [".",".",".","2","7","5","9",".","."]]
        guess_solve(board2)
        assert(board2) == [["5","1","9","7","4","8","6","3","2"],["7","8","3","6","5","2","4","1","9"],["4","2","6","1","3","9","8","7","5"],["3","5","7","9","8","6","2","4","1"],["2","6","4","3","1","7","5","9","8"],["1","9","8","5","2","4","3","6","7"],["9","7","5","8","6","3","1","2","4"],["8","3","2","4","9","1","7","5","6"],["6","4","1","2","7","5","9","8","3"]], "Failed Testcase TWO"
    def testBackTrack3(self):
        board3 =   [['2','9','5','7','4','3','8','6','1'],\
                    ['4','3','1','8','6','5','9','.','.'],\
                    ['8','7','6','1','9','2','5','4','3'],\
                    ['3','8','7','4','5','9','2','1','6'],\
                    ['6','1','2','3','8','7','4','9','5'],\
                    ['5','4','9','2','1','6','7','3','8'],\
                    ['7','6','3','5','2','4','1','8','9'],\
                    ['9','2','8','6','7','1','3','5','4'],\
                    ['1','5','4','9','3','8','6','.','.']]
        guess_solve(board3, [['2', '9', '5', '7', '4', '3', '8', '6', '1'], ['4', '3', '1', '8', '6', '5', '9', '2', '7'], ['8', '7', '6', '1', '9', '2', '5', '4', '3'], ['3', '8', '7', '4', '5', '9', '2', '1', '6'], ['6', '1', '2', '3', '8', '7', '4', '9', '5'], ['5', '4', '9', '2', '1', '6', '7', '3', '8'], ['7', '6', '3', '5', '2', '4', '1', '8', '9'], ['9', '2', '8', '6', '7', '1', '3', '5', '4'], ['1', '5', '4', '9', '3', '8', '6', '7', '2']])
        assert(board3) != [['2', '9', '5', '7', '4', '3', '8', '6', '1'], ['4', '3', '1', '8', '6', '5', '9', '2', '7'], ['8', '7', '6', '1', '9', '2', '5', '4', '3'], ['3', '8', '7', '4', '5', '9', '2', '1', '6'], ['6', '1', '2', '3', '8', '7', '4', '9', '5'], ['5', '4', '9', '2', '1', '6', '7', '3', '8'], ['7', '6', '3', '5', '2', '4', '1', '8', '9'], ['9', '2', '8', '6', '7', '1', '3', '5', '4'], ['1', '5', '4', '9', '3', '8', '6', '7', '2']], "board3" 
    
    #tests for indivdual functions
    def testFindEmpty(self):
        board =[['5','3','.','.','7','.','.','.','.'], \
            ['6','.','.','1','9','5','.','.','.'], \
            ['.','9','8','.','.','.','.','6','.'], \
            ['8','.','.','.','6','.','.','.','.'], \
            ['4','.','.','8','.','3','.','.','1'], \
            ['7','.','.','.','2','.','.','.','6'], \
            ['.','6','.','.','.','.','2','8','.'], \
            ['.','.','.','4','1','9','.','.','5'], \
            ['.','.','.','.','8','.','.','7','9']]
        assert(find_empty(board)) == [0,2], "find_empty failed"

    def testIsValid(self):
        board =[['5','3','.','.','7','.','.','.','.'], \
            ['6','.','.','1','9','5','.','.','.'], \
            ['.','9','8','.','.','.','.','6','.'], \
            ['8','.','.','.','6','.','.','.','.'], \
            ['4','.','.','8','.','3','.','.','1'], \
            ['7','.','.','.','2','.','.','.','6'], \
            ['.','6','.','.','.','.','2','8','.'], \
            ['.','.','.','4','1','9','.','.','5'], \
            ['.','.','.','.','8','.','.','7','9']]
        assert(is_valid(board,4,[0,2])) == True, "is_valid failed"

class CreateSudokuTestCase(unittest.TestCase):
    def setUp(self):
        pass

    def testCreateSudoku(self):
        assert(is_solved(create_completed_sudoku())) == True, "create_completed_sudoku failed"
        

if __name__ == "__main__":
    unittest.main()


